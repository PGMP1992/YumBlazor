@page "/cart"

@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@using YumBlazor.Services
@inject IShoppingCartRepos _cartRepos
@inject IOrderRepos _orderRepos
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IJSRuntime _JS
@inject ICommon _Common
@inject NavigationManager _NavigationManager
@inject SharedStateService _SharedStateService
@inject PaymentService _paymentService

@attribute [Authorize]

<PageTitle>Cart</PageTitle>

@if (isProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="container">
    
        @if(CartList.Any()) 
        {
            @* Cart Summary  ---------------------------*@
            <div class="row w-100">
                <div class="col-lg-6">
                    <div class="container p-4">
                        <h3 class="mb-3">
                            Cart Summary
                        </h3>

                        @foreach( var cart in CartList) {

                            <div class="d-flex my-2">
                                <div class="card flex-row w-100">
                                    <img class="card-img-left" style="width: 120px;" src="@(cart.Product.ImageUrl ?? "/images/default.png")">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <h5>
                                                @cart.Product.Name
                                            </h5>
                                            <h5>
                                                @cart.Product.Price.ToString("C", CultureInfo.GetCultureInfo("se-SE"))
                                            </h5>
                                    
                                        </div>
                                        <div class="flex-fill">
                                            <h5 class="text-dark">
                                                @((cart.Product.Price * cart.Count).ToString("C", CultureInfo.GetCultureInfo("se-SE")))
                                            </h5>
                                        </div>

                                        <div class="d-flex justify-content-between align-items-center">
                                            <div class="d-flex justify-content-between g-0">
                                                <span title="Remove one" style="cursor:pointer;" @onclick="() => UpdateCartItem(cart.ProductId, -1)">
                                                        @* <i class="bi bi-dash-circle-fill btn text-secondary" title="Remove one"></i> *@
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-dash-circle-fill" viewBox="0 0 16 16">
                                                        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M4.5 7.5a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1z" />
                                                    </svg>

                                                </span>
                                                <span class="mx-3">
                                                    <b class="lead">@cart.Count</b>
                                                </span>
                                                <span title="Add one" style="cursor:pointer;"  @onclick="()=>UpdateCartItem(cart.ProductId, 1)">
                                                        @* <i class="bi bi-plus-circle-fill btn text-secondary" title="Add another"></i> *@
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-plus-circle-fill" viewBox="0 0 16 16">
                                                        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3z" />
                                                    </svg>
                                                </span >
                                                
                                            </div>
                                            <button class="btn btn-dark" title="Delete from Cart" @onclick="() => UpdateCartItem(cart.ProductId, -10000)">
                                                    @* <i class="bi bi-trash3-fill" style="cursor:pointer;" title="Remove"></i> *@
                                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" 
                                                    class="bi bi-trash3-fill" viewBox="0 0 16 16" >
                                                    <path d="M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5m-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5M4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06m6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528M8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5" />
                                                </svg>
                                            </button>
                                        
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                @* Pickup Details ---------------------------*@
                    <div class="col-lg-6 col-12 pt-4">
                    <div class="card border border-0">
                            <div class="h3 card-header bg-white border border-0">
                            Pickup Details
                        </div>

                        <EditForm Model="OrderHeader" FormName="CartForm" OnValidSubmit="ProcessOrderCreation">
                            <DataAnnotationsValidator />
                            <div class="card-body py-0">
                                    <div class="form-group">
                                        <label class="text-secondary">Name</label>
                                        <InputText @bind-Value="OrderHeader.Name" type="text" class="form-control" />
                                        <ValidationMessage For="@(()=> OrderHeader.Name)" />
                                    </div>
                                    <div class="form-group">
                                        <label class="text-secondary">Email</label>
                                        <InputText @bind-Value="OrderHeader.Email" type="text" class="form-control" />
                                        <ValidationMessage For="@(()=> OrderHeader.Email)" />
                                    </div>
                                    <div class="form-group">
                                         <label class="text-secondary">Phone</label>
                                        <InputText @bind-Value="OrderHeader.PhoneNumber" type="text" class="form-control" />
                                        <ValidationMessage For="@(()=> OrderHeader.PhoneNumber)" />
                                    </div>

                                    <h5 class="mt-3">
                                        Grand Total: @OrderHeader.Total.ToString("C", CultureInfo.GetCultureInfo("se-SE"))
                                    </h5>
                                    <h5>
                                        No. of Items: @TotalItems 
                                    </h5>
                            </div>

                            <button type="submit" class="btn btn-dark mx-3 mt-2">
                                Place Order
                            </button>
                        </EditForm>
                    </div>
                </div>
                </div>
            }
        
        else
        {
             <div class="p-2">
                <div class="alert alert-warning">
                    Your Cart is Empty. Please add items to cart. 
                </div>
            </div>
        }
    </div>
}


@code {
    private IEnumerable<ShoppingCart> CartList = new List<ShoppingCart>();

    private bool isProcessing { get; set; } = true;
    private string userName { get; set; } = string.Empty;

    [SupplyParameterFromForm]
    public OrderHeader OrderHeader { get; set; } = new OrderHeader();

    private int TotalItems { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        OrderHeader.Email = await _Common.GetUserEmail();
        OrderHeader.UserId = await _Common.GetUserId();
        OrderHeader.Status = SD.StatusPending;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadShoppingCart();
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadShoppingCart()
    {
        CartList = await _cartRepos.GetAllAsync(OrderHeader.UserId);

        // if (! CartList.Any())
        // {
        //     _JS?.ToastrError("Your Cart is Empty");
        //     _NavigationManager.NavigateTo("/");
        // }

        OrderHeader.Total = 0;
        TotalItems = 0;
        foreach( var cart in CartList)
        {
            OrderHeader.Total += (Convert.ToDouble(cart.Product.Price) * cart.Count);
            TotalItems += cart.Count;
        }
        OrderHeader.Total = Math.Round(OrderHeader.Total, 2);

    }

    private async Task UpdateCartItem(int prodId, int updateBy)
    {
        // Add Item to Cart
        var result = await _cartRepos.UpdateCartAsync(OrderHeader.UserId, prodId, updateBy);
        _SharedStateService.CartCount = await _cartRepos.GetTotalCartAsync(OrderHeader.UserId);
        await LoadShoppingCart();
    }

    private async Task ProcessOrderCreation ()
    {
        isProcessing = true;
        await Task.Yield();
        OrderHeader.OrderDetails = SD.ConvertToCart(CartList.ToList());

        var session = _paymentService.CreateStripeCheckoutSession(OrderHeader);
        OrderHeader.SessionId = session.Id;

        await _orderRepos.CreateAsync(OrderHeader);
        _NavigationManager.NavigateTo(session.Url);
    }
        
}
