@page "/cart"

@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@using YumBlazor.Services
@inject IShoppingCartRepos _cartRepos
@inject IOrderRepos _orderRepos
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IJSRuntime _JS
@inject ICommon _Common
@inject NavigationManager _NavigationManager
@inject SharedStateService _SharedStateService
@inject PaymentService _paymentService

@attribute [Authorize]

<PageTitle>Cart</PageTitle>

@if (isProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    @if(CartList.Any()) 
    {
        <div class="row w-100">
            <div class="col-lg-6">
                <div class="container p-4 m-2">
                    <h4 class="text-center text-success display-6">
                        Cart Summary
                    </h4>

                    @foreach( var cart in CartList) {

                        <div class="d-flex p-2 m-2">
                            <div class="card flex-row w-100">
                                <img class="card-img-left" style="width: 120px;" src="@(cart.Product.ImageUrl ?? "/images/default.png")">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h4 class="">
                                            @cart.Product.Name
                                        </h4>
                                        <h4>
                                            @cart.Product.Price.ToString("C", CultureInfo.GetCultureInfo("se-SE"));
                                        </h4>
                                    </div>
                                    <div class="flex-fill">
                                        <h4 class="text-danger">
                                            @((cart.Product.Price * cart.Count).ToString("C", CultureInfo.GetCultureInfo("se-SE")));
                                        </h4>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="d-flex justify-content-between g-0">
                                            <span @onclick="()=>UpdateCartItem(cart.ProductId, -1)">
                                                <i class="bi bi-dash-circle-fill btn text-secondary"></i>
                                            </span>
                                            <span class="ml-1 me-1">
                                                <b class="lead">@cart.Count</b>
                                            </span>
                                            <span @onclick="()=>UpdateCartItem(cart.ProductId, 1)">
                                                <i class="bi bi-plus-circle-fill btn text-secondary"></i>
                                            </span>
                                        </div>

                                        <button class="btn btn-danger"
                                        @onclick="()=>UpdateCartItem(cart.ProductId, -10000)">
                                            Remove
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="col-lg-6 col-12 p-4">
                <div class="card">
                    <div class="card-header text-success text-center display-6">
                        Pickup Details
                    </div>
                    <EditForm Model="OrderHeader" FormName="CartForm" OnValidSubmit="ProcessOrderCreation">
                        <DataAnnotationsValidator />
                        <div class="card-body">

                            <div class="card-body">
                                <div class="form-group">
                                    <label>Name</label>
                                    <InputText @bind-Value="OrderHeader.Name" type="text" class="form-control" />
                                    <ValidationMessage For="@(()=> OrderHeader.Name)" />
                                </div>
                                <div class="form-group">
                                    <label>Email</label>
                                    <InputText @bind-Value="OrderHeader.Email" type="text" class="form-control" />
                                    <ValidationMessage For="@(()=> OrderHeader.Email)" />
                                </div>
                                <div class="form-group">
                                    <label>Phone</label>
                                    <InputText @bind-Value="OrderHeader.PhoneNumber" type="text" class="form-control" />
                                    <ValidationMessage For="@(()=> OrderHeader.PhoneNumber)" />
                                </div>
                            </div>

                            <div class="card mt-4 bg-light">
                                <div class="card-body">
                                    <h4>
                                        Grand Total: @OrderHeader.Total.ToString("C", CultureInfo.GetCultureInfo("se-SE"))
                                    </h4>
                                    <h4>
                                        No. of Items: @TotalItems 
                                    </h4>
                                </div>
                            </div>
                        </div>

                        <button type="submit" class="btn btn-success m-4">
                            Looks Good? Place Order!
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="p-2">
            <div class="alert alert-warning">
                Your Cart is Empty. Please add items to cart. 
            </div>
        </div>
    }
}


@code {
    private IEnumerable<ShoppingCart> CartList = new List<ShoppingCart>();

    private bool isProcessing { get; set; } = true;
    private string userName { get; set; } = string.Empty;

    [SupplyParameterFromForm]
    public OrderHeader OrderHeader { get; set; } = new OrderHeader();

    private int TotalItems { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        OrderHeader.Email = await _Common.GetUserEmail();
        OrderHeader.UserId = await _Common.GetUserId();
        OrderHeader.Status = SD.StatusPending;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadShoppingCart();
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadShoppingCart()
    {
        CartList = await _cartRepos.GetAllAsync(OrderHeader.UserId);

        OrderHeader.Total = 0;
        TotalItems = 0;
        foreach( var cart in CartList)
        {
            OrderHeader.Total += (Convert.ToDouble(cart.Product.Price) * cart.Count);
            TotalItems += cart.Count;
        }
        OrderHeader.Total = Math.Round(OrderHeader.Total, 2);

    }

    private async Task UpdateCartItem(int prodId, int updateBy)
    {
        // Add Item to Cart
        var result = await _cartRepos.UpdateCartAsync(OrderHeader.UserId, prodId, updateBy);
        _SharedStateService.CartCount = await _cartRepos.GetTotalCartAsync(OrderHeader.UserId);
        await LoadShoppingCart();
    }

    private async Task ProcessOrderCreation ()
    {
        isProcessing = true;
        await Task.Yield();
        OrderHeader.OrderDetails = SD.ConvertToCart(CartList.ToList());

        var session = _paymentService.CreateStripeCheckoutSession(OrderHeader);
        OrderHeader.SessionId = session.Id;

        await _orderRepos.CreateAsync(OrderHeader);
        _NavigationManager.NavigateTo(session.Url);
    }
}
