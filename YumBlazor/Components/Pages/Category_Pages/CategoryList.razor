@page "/category"
@inject ICategoryRepos _categoryRepos

<h3>Category List</h3>

@if(IsProcessing ) {
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center justify-content-center">
        <img src="./images/loading.gif" alt="loading" />
    </div>
}
else {
    <div class="card border border-1 mt-4">
        <div class="card-header bg-black  py-3">
            <div class="text-center">
                <h2 class="text-white py-2">Category List</h2>
            </div>
        </div>
    </div>

    <div class="card-body py-2">
        <div class="row">
            <div class="text-end">
                <a href="category/create" class="btn btn-primary" style="width:100px">
                    <i class="bi bi-plus-square"></i>
                    New</a>
            </div>
        </div>
    </div>

    @if(Categories.Any())
    {
        <div class="table-responsive">
            <table class="table table-sm-3 table-hover">
                <thead class="table-primary">
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var item in Categories)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>
                                <a href="@($"category/update/{item.Id}")" class="btn btn-primary">
                                    <i class="bi bi-pencil-square"></i>
                                    Edit</a>
                                <a href="@($"category/delete/{item.Id}")"  class="btn btn-danger">
                                    <i class="bi bi-trash3"></i>
                                    Delete</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}


@code {

    private bool IsProcessing { get; set; } = true;
    private IEnumerable<Category> Categories { get; set; }  

    // protected override async Task OnInitializedAsync()
    // {

    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if( firstRender)
        {
            await LoadCategories();
            IsProcessing = false;
            StateHasChanged();
        }
        //return  base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadCategories()
    {
        //Thread.Sleep(1000);
        Categories = await _categoryRepos.GetAllAsync();
    }
}
