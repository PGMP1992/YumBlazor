@page "/"
@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@using YumBlazor.Services
@inject IProductRepos _prodRepos
@inject ICategoryRepos _catRepos
@inject IShoppingCartRepos _cartRepos
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IJSRuntime _JS
@inject ICommon _Common
@inject NavigationManager _NavigationManager
@inject SharedStateService _SharedStateService
@inject NotificationService NotificationService
@* @attribute [Authorize] *@

<PageTitle>Yumm - Home</PageTitle>

@if (isProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="container-fluid px-0 m-0 full-width">
        <div class="bg-secondary py-4">
            <div class="m-auto d-flex align-items-center" style="width: 400px;">
                <div class="input-group">
                    <input type="text" class="form-control rounded-pill"
                           @bind:event="oninput" @bind:get="_searchText" @bind:set="FilterByName"
                           placeholder="Search the menu!"
                           style="padding: 20px;">
                    
                    <span class="input-group-text bg-transparent text-white border-0">
                        <i class="bi bi-search"></i>
                    </span>
                    <button class="btn btn-outline-secondary text-white rounded-pill" type="button" @onclick="ClearSearch">
                        <i class="bi bi-x-circle"></i>
                    </button>
                </div>
            </div>
        </div>

        <div class="content h-100 px-3 mt-2">
            @* Categories ------------------------- *@
            <ul class="nav nav-item justify-content-center">
                <li class="nav-item">
                    <span class="nav-link @GetActiveTab(0)" href="#" style="cursor: pointer" @onclick="()=>FilterProducts(0)">All</span>
                </li>
                @foreach (var cat in Categories)
                {
                    <li class="nav-item">
                        <span class="nav-link @GetActiveTab(cat.Id)"
                              href="#" style="cursor: pointer" @onclick="()=>FilterProducts(cat.Id)">@cat.Name</span>
                    </li>
                }
            </ul>
        </div>

        @* Products ---------------------------- *@
        <div class="row row-cols-2 row-cols-sm-3 row-cols-md-4 row-cols-lg-5 g-2 p-2">
            @foreach (var prod in FilteredProducts)
            {
            <div class="col">
                <div class="card h-100 border-0">
                    <div class="card-body">
                            
                        <div class="text-center">
                            @if (!string.IsNullOrEmpty(prod.ImageUrl))
                            {
                                <img class="card-img-top img-thumbnail border-0 mt-2" src="@prod.ImageUrl" style="max-height: 200px; object-fit: cover;">
                            }
                            else
                            {
                                <img class="card-img-top img-thumbnail border-0 mt-2" src="images/default.png" style="max-height: 200px; object-fit: cover;">
                            }
                        </div>

                            <div class="row mt-2">
                                <div class="col text-start">
                                    <p class="h5 card-title lead text-success">@prod.Name</p>
                                </div>
                                
                                @if (!string.IsNullOrEmpty(prod.Tag))
                                {
                                    <div class="col text-end">
                                        <i class="bi bi-star bg-warning p-2">
                                            @prod.Tag
                                        </i>
                                    </div>
                                        @*     <div class="col-6 text-end">
                                    <p class="text-danger text-center"><b>@prod.Category.Name</b></p>
                                </div> *@
                                }
                            </div>
                        @* <p class="h5 card-title text-center lead text-success">@prod.Name</p> *@
                        @* <p class="text-danger text-center"><b>@prod.Category.Name</b></p> *@
                        @* <p class="card-text mt-2">@((MarkupString)@prod.Description)</p> *@
                            <div class="description">
                                <p class="card-text mt-2">@((MarkupString)@prod.Description)</p>
                            </div>
                            
                        
                                    
                    </div>
                    @* <div class="description">
                            <p class="card-text mt-2">@((MarkupString)@prod.Description)</p>
                    </div> *@
                            
                    <div class="card-footer border-0 " @onclick="()=>AddOrderItem(prod)">
                        <div class="row">
                            <div class="col-6 text-start px-3 h5">
                                @prod.Price.ToString("C", CultureInfo.GetCultureInfo("se-SE"))
                            </div>
                            <div class="col-6 text-end px-3">
                                <i class="bi bi-cart3 btn btn-success">
                                    Add
                                </i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            }
        </div>
    </div>
}

@code {

    private IEnumerable<Product> Products = new List<Product>();
    private IEnumerable<Category> Categories = new List<Category>();
    private IEnumerable<Product> FilteredProducts = new List<Product>();

    private bool isProcessing { get; set; } = true;
    private int _selectedCategoryId = 0;
    private string _searchText = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProducts()
    {
        Products = await _prodRepos.GetAllAsync();
        Categories = await _catRepos.GetAllAsync();
        FilterProducts(0);
    }

    private void FilterProducts(int catId)
    {
        if (catId == 0)
        {
            FilteredProducts = Products;
            _selectedCategoryId = catId;
            return;
        }
        else
        {
            FilteredProducts = Products.Where(u => u.CategoryId == catId).ToList();
            _selectedCategoryId = catId;
            _searchText = String.Empty;
        }
    }

    private void FilterByName(string text)
    {
        if (string.IsNullOrWhiteSpace(text))
        {
            FilteredProducts = Products;
        }
        else
        {
            FilteredProducts = Products
                .Where(u => u.Name.Contains(text, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        _searchText = text;
    }

    private string GetActiveTab(int catId)
    {
        return catId == _selectedCategoryId ? "active" : string.Empty;
    }

    private async Task AddOrderItem(Product prod)
    {
        if ( ! await _Common.IsUserAuthenticated())
        {
            _NavigationManager.NavigateTo("account/login", true); // Need to forceLoad = "true" for the page otherwise gets  Not Found!
        }
        else
        {
            //Add Item to Cart
            var userId = await _Common.GetUserId();

            var result = await _cartRepos.UpdateCartAsync(userId, prod.Id, 1);
            _SharedStateService.CartCount = await _cartRepos.GetTotalCartAsync(userId);

            if (result)
            {
                _JS?.ToastrSuccess("Product added to Cart");
            }
            else
            {
                _JS?.ToastrError("Something went wrong");
            }
        }
    }

    private void ClearSearch()
    {
        _searchText = string.Empty;
        FilteredProducts = Products;
    }
}