@page "/"
@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@using YumBlazor.Services
@inject IProductRepos _prodRepos
@inject ICategoryRepos _catRepos
@inject IShoppingCartRepos _cartRepos
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IJSRuntime _JS
@inject ICommon _Common
@inject NavigationManager _NavigationManager
@inject SharedStateService _SharedStateService
@inject NotificationService NotificationService
@* @attribute [Authorize] *@

<PageTitle>Yumm - Home</PageTitle>

@if (isProcessing)
{
    <div class="d-flex flex-column align-items-center justify-content-center bg-white min-vh-100">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="container-fluid m-0 p-0">
        @* Search Box ======================================================= *@
        <div class="bg-secondary-subtle py-4">
            <div class="mx-auto d-flex align-items-center" style="max-width: 400px;">
                <div class="input-group">
                    <input type="text" class="form-control rounded-pill"
                           @bind:event="oninput" @bind:get="_searchText" @bind:set="FilterByName"
                           placeholder="Search the menu!" />
                    <span class="input-group-text bg-transparent border-0">
                        <i class="bi bi-search"></i>
                    </span>
                    <button class="btn btn-outline-secondary-subtle rounded-pill" type="button" @onclick="ClearSearch">
                        <i class="bi bi-x-circle"></i>
                    </button>
                </div>
            </div>
        </div>

        @* Categories =======================================================*@
        <div class="my-2">
            <ul class="nav justify-content-center">
                <li class="nav-item">
                    <span class="nav-link @GetActiveTab(0)" style="cursor: pointer" @onclick="()=>FilterProducts(0)">All</span>
                </li>
                @foreach (var cat in Categories)
                {
                    <li class="nav-item">
                        <span class="nav-link @GetActiveTab(cat.Id)"
                              style="cursor: pointer" @onclick="()=>FilterProducts(cat.Id)">@cat.Name</span>
                    </li>
                }
            </ul>
        </div>

        @* Products =======================================================*@
        @if (FilteredProducts.Any())
        {
            
            <div class="row row-cols-2 row-cols-sm-2 row-cols-md-3 row-cols-lg-6 g-0">
            
            @foreach (var prod in FilteredProducts)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <img src="@(!string.IsNullOrEmpty(prod.ImageUrl) ? prod.ImageUrl : "images/default.png")"
                                alt="@prod.Name"
                                class="card-img-top p-2"
                                style="height: 250px; width:250px; object-fit: cover; width: 100%;"
                                loading="lazy" decoding="async"
                                onerror="this.onerror=null; this.src='/images/default.png';" />
                        <div class="card-body d-flex flex-column px-2">
                            <div class="row">
                                <div class="col text-start">
                                    <p class="h3 card-title text-success text-truncate">@prod.Name</p>
                                </div>
                                @if (!string.IsNullOrEmpty(prod.Tag))
                                {
                                    <div class="col text-end">
                                        <span class="badge bg-warning text-dark ms-2">@prod.Tag</span>
                                    </div>
                                }
                            </div>
                            <div class="description">
                                <p class="card-text text-secondary">@((MarkupString)@prod.Description)</p>
                            </div>
                        </div>
                        <div class="card-footer border-0" @onclick="()=>AddOrderItem(prod)">
                            <div class="row">
                                <div class="col-6 text-start px-3 h4">
                                    @prod.Price.ToString("C", CultureInfo.GetCultureInfo("se-SE"))
                                </div>
                                <div class="col-6 text-end px-3">
                                    <i class="bi bi-cart3 btn btn-success">
                                        Add
                                    </i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            
        </div>
    }
    else
    {
        <div class="alert alert-info text-center m-4">
            <i class="bi bi-info-circle"></i> No products found.
        </div>
    }
    </div>
}

@code {
    private IEnumerable<Product> Products = new List<Product>();
    private IEnumerable<Category> Categories = new List<Category>();
    private IEnumerable<Product> FilteredProducts = new List<Product>();

    private bool isProcessing { get; set; } = true;
    private int _selectedCategoryId = 0;
    private string _searchText = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProducts()
    {
        Products = await _prodRepos.GetAllAsync();
        Categories = await _catRepos.GetAllAsync();
        FilterProducts(0);
    }

    private void FilterProducts(int catId)
    {
        if (catId == 0)
        {
            FilteredProducts = Products;
            _selectedCategoryId = catId;
            return;
        }
        else
        {
            FilteredProducts = Products.Where(u => u.CategoryId == catId).ToList();
            _selectedCategoryId = catId;
            _searchText = String.Empty;
        }
    }

    private void FilterByName(string text)
    {
        if (string.IsNullOrWhiteSpace(text))
        {
            FilteredProducts = Products;
        }
        else
        {
            FilteredProducts = Products
                .Where(u => u.Name.Contains(text, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        _searchText = text;
    }

    private string GetActiveTab(int catId)
    {
        return catId == _selectedCategoryId ? "active" : string.Empty;
    }

    private async Task AddOrderItem(Product prod)
    {
        if (!await _Common.IsUserAuthenticated())
        {
            _NavigationManager.NavigateTo("account/login", true);
        }
        else
        {
            var userId = await _Common.GetUserId();
            var result = await _cartRepos.UpdateCartAsync(userId, prod.Id, 1);
            _SharedStateService.CartCount = await _cartRepos.GetTotalCartAsync(userId);

            if (result)
            {
                _JS?.ToastrSuccess("Product added to Cart");
            }
            else
            {
                _JS?.ToastrError("Something went wrong");
            }
        }
    }

    private void ClearSearch()
    {
        _searchText = string.Empty;
        FilteredProducts = Products;
    }
}