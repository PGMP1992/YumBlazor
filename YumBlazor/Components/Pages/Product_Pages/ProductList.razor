@page "/Product"
@using System.Globalization
@inject IProductRepos _productRepos
@inject IJSRuntime _JS

<BsModal OnModalConfirmation="ConfirmDelete_click"
    ButtonStyle="btn-danger"
    ButtonText="Delete"
    Title="Are you sure you want to Delete this Product?"
></BsModal>

@if(IsProcessing ) {
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center justify-content-center">
        <img src="./images/loading.gif" alt="loading" />
    </div>
}
else {
    <div class="card border-1 m-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Product List</h2>
                </div>
            </div>
        </div>

        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="text-end">
                    <a href="Product/create" class="btn btn-primary" style="width:100px">
                        <i class="bi bi-plus-square"></i>
                        New</a>
                </div>
            </div>
    

        @if(Products.Any())
        {
            <div class="table-responsive">
                <table class="table table-sm-3 table-hover">
                    <thead class="table-primary">
                        <tr>
                            <th>Name</th>
                            <th>Price</th>
                            <th>Special Tag</th>
                            <th>Category</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(var item in Products)
                        {
                            <tr>
                                <td>@item.Name</td>
                                <td>@item.Price.ToString("C")</td>
                                <td><span class="badge text-bg-info"></span>@item.Tag</td>
                                <td>@item.Category.Name</td>
                                <td>
                                    <a href="@($"/Product/update/{item.Id}")" class="btn btn-primary">
                                        <i class="bi bi-pencil-square"></i>
                                        Edit
                                    </a>
                                    <button class="btn btn-danger" @onclick="()=>HandleDelete(item.Id)">
                                        <i class="bi bi-trash3"></i>
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>
}


@code {

    private bool IsProcessing { get; set; } = true;
    private IEnumerable<Product> Products { get; set; }
    private int DeleteProductId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if( firstRender)
        {
            await LoadProducts();
            IsProcessing = false;
            StateHasChanged();
        }
        //return  base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadProducts()
    {
        //Thread.Sleep(1000);
        Products = await _productRepos.GetAllAsync();
    }

    private void HandleDelete(int id)
    {
        DeleteProductId =  id;
        _JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete_click(bool isConfirmed)
    {
        IsProcessing = true;
        await _JS.InvokeVoidAsync("HideConfirmationModal");

        if(isConfirmed && DeleteProductId != 0)
        {
            var result = await _productRepos.DeleteAsync(DeleteProductId);
            if(result)
                _JS?.ToastrSuccess("Product Deleted");
            else
                _JS?.ToastrError("Error while trying to Delete.");

            await LoadProducts();
        }
        DeleteProductId = 0;
        IsProcessing = false;
    }
}
