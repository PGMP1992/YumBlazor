@page "/product/create"
@page "/product/update/{id:int}"
@using Microsoft.AspNetCore.Authorization
@inject IProductRepos _productRepository
@inject ICategoryRepos _categoryRepository
@inject NavigationManager _navigationManager
@inject IWebHostEnvironment _webHostEnvironment
@inject IJSRuntime _JS

@attribute [Authorize]

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card border-1">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id==0?"Create": "Update") Product</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-2">
            <EditForm Model="Product" FormName="ProductUpsertForm" OnValidSubmit="UpsertProduct" >
                <DataAnnotationsValidator/>

                <div class="border-0 mt-2">

                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="Product.Name" class="form-control" id="Name" placeholder="Name" />
                        <label for="Name">Name</label>
                        <ValidationMessage For="@(() => Product.Name)" />
                    </div>
                    <div class="form-floating py-3 col-12">
                        @*  <label for="Description">Description</label>*@
                        <RadzenHtmlEditor @bind-Value=@Product.Description style="height: 450px;" >
                            <RadzenHtmlEditorUndo />
                            <RadzenHtmlEditorRedo />
                            <RadzenHtmlEditorSeparator />
                            <RadzenHtmlEditorBold />
                            <RadzenHtmlEditorItalic />
                            <RadzenHtmlEditorUnderline />
                            <RadzenHtmlEditorStrikeThrough />
                            <RadzenHtmlEditorSeparator />
                            <RadzenHtmlEditorColor />
                            <RadzenHtmlEditorBackground />
                            <RadzenHtmlEditorRemoveFormat />
                        </RadzenHtmlEditor>
                        <ValidationMessage For="@(() => Product.Description)" />
                    </div>

                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="Product.Tag" class="form-control" id="SpecialTag" placeholder="Special Tag" />
                        <label for="SpecialTag">Special Tag</label>
                        <ValidationMessage For="@(() => Product.Tag)" />
                    </div>

                    <div class="form-floating py-3 col-12">
                        <InputNumber @bind-Value="Product.Price" class="form-control" id="Price" placeholder="Price" />
                        <label for="Price">Price</label>
                        <ValidationMessage For="@(() => Product.Price)" />
                    </div>

                    <div class="form-floating py-3 col-12">
                        <InputSelect @bind-Value="Product.CategoryId" class="form-select" id="category">
                            <option value="0" disabled selected>--Select Category--</option>
                            @foreach (var category in _categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                        <label for="category">Category</label>
                        <ValidationMessage For="@(() => Product.CategoryId)" />
                    </div>

                    <div class="form-floating py-3 col-12">
                        @if (Product.ImageUrl == null)
                        {
                            <InputFile OnChange="LoadFiles" class="form-control pb-3" id="customFile"
                                accept="image/png,image/jpeg" >
                            </InputFile>
                            <label for="customFile">Upload Image</label>
                        }

                        @if (Product.ImageUrl != null)
                        {
                            <div class="row">
                                <div class="col-3">
                                    <img src="@Product.ImageUrl" alt="..." class="img-thumbnail" />
                                    <span>DB: @Product.ImageUrl</span>
                                </div>
                                <div class="col-md-9">
                                    <i class="bi bi-trash btn btn-outline-danger" @onclick="DeleteImage">Remove</i>
                                </div>
                            </div>
                        }
                    </div>

                    <div class="d-flex">
                        <div class="row">
                            <div class="btn-group" role="group">
                                <button type="submit" class="btn btn-primary mx-1" disabled="@IsProcessing">
                                    @(Id == 0 ? "Create" : "Update") 
                                </button>
                                <a href="product" class="btn btn-outline-primary" disabled="@IsProcessing">
                                    Back
                                </a>
                            </div>
                        </div>
                    </div>
                </div>

            </EditForm>

        </div>
    </div>
}


@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private Product Product { get; set; } = new Product();

    private IEnumerable<Category> _categories = new List<Category>();

    private string? _directoryPath { get; set; }
    private string uploadFile { get; set; }= string.Empty;
    private bool IsProcessing { get; set; } = true;

    protected override Task OnInitializedAsync()
    {
        _directoryPath = Path.Combine(_webHostEnvironment.WebRootPath, "images", "product");
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProductAndCategoryList();
            IsProcessing = false;
            StateHasChanged();
        }
        //return base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadProductAndCategoryList()
    {
        if (Id > 0)
        {
            Product = await _productRepository.GetAsync(Id);
        }
        _categories = await _categoryRepository.GetAllAsync();
    }

    private async Task UpsertProduct()
    {
        IsProcessing = true;
        if (Product.Id == 0) //create
        {
            await _productRepository.CreateAsync(Product);
            await _JS.ToastrSuccess("Product Created");
        }
        else //update
        {
            await _productRepository.UpdateAsync(Product);
            await _JS.ToastrSuccess("Product Updated");
        }
        IsProcessing = false;
        _navigationManager.NavigateTo("product");
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            IsProcessing = true;
            var file = e.File;
            System.IO.FileInfo fileInfo = new(file.Name);
            //var newFileName = $"{Guid.NewGuid()}{fileInfo.Extension}";
            
            if (!Directory.Exists(_directoryPath))
            {
                Directory.CreateDirectory(_directoryPath);
            }

            var path = Path.Combine(_directoryPath, file.Name);

            await using FileStream fs = new FileStream(path, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(fs);
            Product.ImageUrl = $"/images/product/{file.Name}";
            uploadFile = path;
        }
        catch (Exception ex)
        {
            await _JS.ToastrError($"Error uploading image: {ex.Message}");
        }
        finally
        {
            IsProcessing = false;
        }

    // Coe below from Tangy Services
    // public async Task<string> UploadFile(IBrowserFile file)
    // {
    //     FileInfo fileInfo = new(file.Name);
    //     var fileName = Guid.NewGuid().ToString() + fileInfo.Extension;
    //     var folder = $"{_webHostEnvironment.WebRootPath}\\images\\product";
    //     if (!Directory.Exists(folder))
    //     {
    //         Directory.CreateDirectory(folder);
    //     }

    //     var filePath = Path.Combine(folder, fileName);
    //     await using FileStream fs = new FileStream(filePath, FileMode.Create);
    //     await file.OpenReadStream().CopyToAsync(fs);

    //     var fullPath = $"/images/product/{fileName}";
    //     return fullPath;
    // }
    }
    
    private void DeleteImage()
    {
        if (Product.ImageUrl == null)
            return;

        var fileToDelete = Product.ImageUrl.Split('/').Reverse().First();
        var filePathToDeleteImage = Path.Combine(_directoryPath, fileToDelete);

        if (!File.Exists(filePathToDeleteImage))
        {
            Product.ImageUrl = null;
            return;
        }

        File.Delete(filePathToDeleteImage);

        Product.ImageUrl = null;
        return;
    }
        
}
