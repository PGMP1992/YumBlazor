@page "/order/details/{Id:int}"
@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@inject IOrderRepos _orderRepos
@inject IJSRuntime _JS
@inject AuthenticationStateProvider _AuthenticationStateProvider
@attribute [Authorize]

@if (IsProcessing)
{
    <div class="position-absolute w-100 h-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="container my-5 mx-auto p-5 w-100" style="max-width: 950px;">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/order/list">Orders</a></li>
                <li class="breadcrumb-item active" aria-current="page">Order Details</li>
            </ol>
        </nav>
        <div class="card shadow-sm">
            <div class="card-header bg-success text-white text-center">
                <span class="h4">Order Details - Id: <b>@OrderHeader.Id</b></span>
            </div>

            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <p><strong>Name:</strong> @OrderHeader.Name</p>
                        <p><strong>Email:</strong> @OrderHeader.Email</p>
                        <p><strong>Phone:</strong> @OrderHeader.PhoneNumber</p>
                    </div>
                    <div class="col-md-6">
                        <p><strong>Order Status:</strong> <span class="badge bg-info">@OrderHeader.Status</span></p>
                    </div>
                </div>

                <h4 class="text-success">Menu Items</h4>
                <ul class="list-group mb-3">
                    @foreach (var order in OrderHeader.OrderDetails)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>@order.ProductName</span>
                            <span>@order.Price.ToString("C") x @order.Count = <b>@((order.Price * @order.Count).ToString("C"))</b></span>
                        </li>
                    }
                </ul>

                <div class="card-footer text-end">
                    <h4 class="text-success">
                        Total: @OrderHeader.Total.ToString("C")
                    </h4>
                </div>

                <div class="d-flex justify-content-between mt-3">
                    <a href="/order/list" class="btn btn-secondary">
                        <i class="bi bi-arrow-left"></i> Back to Orders
                    </a>
                    @if (OrderHeader.Status != SD.StatusCancelled &&
                   OrderHeader.Status != SD.StatusCompleted &&
                   _AuthenticationStateProvider.GetAuthenticationStateAsync().GetAwaiter().GetResult().User?.IsInRole(SD.Role_Admin) == true
                   )
                    {
                        <div>
                            <button class="btn btn-danger me-2" @onclick="()=>UpdateStatus(SD.StatusCancelled)">
                                <i class="bi bi-x-circle"></i> Cancel Order
                            </button>
                            @if (OrderHeader.Status == SD.StatusApproved)
                            {
                                <button class="btn btn-primary me-2" @onclick="()=>UpdateStatus(SD.StatusReadyForPickUp)">
                                    <i class="bi bi-box-seam"></i> Ready for Pickup
                                </button>
                            }
                            @if (OrderHeader.Status == SD.StatusReadyForPickUp)
                            {
                                <button class="btn btn-success" @onclick="()=>UpdateStatus(SD.StatusCompleted)">
                                    <i class="bi bi-check-circle"></i> Completed
                                </button>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public int Id { get; set; }

    private bool IsProcessing { get; set; } = true;

    private OrderHeader? OrderHeader = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadOrder();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadOrder()
    {
        OrderHeader = await _orderRepos.GetAsync(Id);
    }

    private async Task UpdateStatus(string newStatus)
    {
        await _orderRepos.UpdateStatusAsync(Id, newStatus, "");
        _JS?.ToastrSuccess("Status updated to " + newStatus);
    }

}