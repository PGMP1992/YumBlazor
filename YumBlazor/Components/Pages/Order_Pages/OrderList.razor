@page "/order/list"
@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@inject IOrderRepos _orderRepos
@inject IJSRuntime _JS
@inject NavigationManager _NavigationManager
@inject ICommon _Common
@attribute [Authorize]

@if (IsProcessing)
{
    <div class="position-absolute w-100 h-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="container">
    
        @if (Orders.Any())
        {
            @* Header ======================== *@
            <div class="card shadow mt-5">
                <div class="card-header bg-black py-3">
                    <div class="row">
                        <div class="col-12 text-center">
                            <h2 class="text-white py-2">Order List</h2>
                        </div>
                    </div>
                </div>

                <div class="card-body p-4">
                    @* Radzen ================================================== *@
                    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced"
                        AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
                        ShowPagingSummary="true" Data="@Orders" ColumnWidth="300px"
                        LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single">
                        <Columns>
                            <RadzenDataGridColumn Property="Id" Filterable="true" Title="Id" Frozen="true" Width="70px" />
                            <RadzenDataGridColumn Property="OrderDate" Title="Date" FormatString="{0:d}" Width="100px" />
                            <RadzenDataGridColumn Property="Total" Title="Total" FormatString="{0:C}" Width="100px" />
                            <RadzenDataGridColumn Property="Status" Title="Status" Width="100px" />
                            @if (IsAdmin == true)
                            {
                                <RadzenDataGridColumn Property="Name" Title="Name" Frozen="false" Width="100px" />
                                <RadzenDataGridColumn Property="PhoneNumber" Title="Phone" Width="100px" />
                                <RadzenDataGridColumn Property="Email" Title="Email" Width="120px" />
                            }
                            <RadzenDataGridColumn Title="Action" Sortable="true" Filterable="true" Width="80px" TextAlign="TextAlign.Center">
                                <Template Context="Orders">
                                    <RadzenButton Shade="Shade.Dark" Text="Details" ButtonStyle="ButtonStyle.Dark" title="View Order Details"
                                        Click="@(()=>_NavigationManager.NavigateTo($"order/details/{Orders.Id}"))"></RadzenButton>
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </div>

                @* Default Grid ==================================================
                <div class="table-responsive">
                    <table class="table table-sm-3 table-hover">
                        <thead class="table-primary">
                            <tr>
                                <th>Id</th>
                                @if (IsAdmin == true)
                                {
                                    <th>Name</th>
                                    <th>Email</th>
                                }
                                <th>Total</th>
                                <th>Status</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var obj in Orders)
                            {
                                <tr>
                                    <td>@obj.Id</td>
                                    @if (IsAdmin == true)
                                    {
                                        <td>@obj.Name</td>
                                        <td>@obj.Email</td>
                                    }
                                    <td>@obj.Total.ToString("C", CultureInfo.GetCultureInfo("se-SE"))</td>
                                    <td>@obj.Status</td>
                                    <td>
                                        <a href="@($"order/details/{obj.Id}")" class="btn btn-primary">
                                            <i class="bi bi-pencil-square"></i>
                                            Details
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div> *@
        </div>
    }
    else
    {
        <div class="p-2">
            <div class="alert alert-warning">
                You have no Orders recorded.
            </div>
        </div>
    } 
    
    </div>
}

@code {
    private bool IsProcessing { get; set; } = true;
    private IEnumerable<OrderHeader> Orders { get; set; } = new List<OrderHeader>();
    private bool? IsAdmin { get; set; }
    private string? UserId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> _authenticationState { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadOrders();
            IsProcessing = false;
            StateHasChanged();
        }
        //return base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadOrders()
    {
        IsProcessing = true;
        StateHasChanged();

        await CheckAuthorization();

        if (IsAdmin == true)
        {
            Orders = await _orderRepos.GetAllAsync();
        }
        else
        {
            Orders = await _orderRepos.GetAllAsync(UserId);
        }
        
        // if (!Orders.Any())
        // {
        //     _JS?.ToastrError("There are no Orders registered in your Account");
        //     _NavigationManager.NavigateTo("/");
        // }
    }


    private async Task CheckAuthorization()
    {
        if (_authenticationState is not null)
        {
            var authState = await _authenticationState;
            var user = authState?.User;
                        
            UserId = await _Common.GetUserId();
            IsAdmin = user?.IsInRole(SD.Role_Admin);
        }
    }
      
}
